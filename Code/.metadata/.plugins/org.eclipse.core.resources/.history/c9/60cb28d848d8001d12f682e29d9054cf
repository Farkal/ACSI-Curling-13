import java.lang.*;


/************************************************************
    Classe Compte permettant de gérer des comptes simples.<BR>
    Un Compte a un numéro, appartient à un propriétaire et on peut y faire
    des versements (crédits) et des retraits (débits).<BR>
    Aucun contrôle n'est réalisé : montant déposé, retiré, ...<BR>
	@author	André Péninou.
	@version	2.14
*****************************/

//    Classe des comptes standards

public class Compte extends Object
             // Si cet héritage n'est pas précisé, il est implicite
{
    /*********************************
        Partie privée d'implémentation
    **********************************/

    // Attributs

    // Nom du propriétaire
	private String proprietaire;

    // Numero de Compte
	private String numCompte;

    // Attributs debit et credit
    // Permettent de comptabiliser depots et retraits
    private double debit, credit;


    // Constructeurs

/**
 * Constructeur non paramétré, appelé aussi constructeur "par défaut".<BR>
 * <BR>
 * Permet de créer un Compte.<BR>
 * Les crédits et débits sont initialisés à 0. le numéro est initialisé à "Pas de numéro", le propriétaire à "Pas de propriétaire"<BR>
 * <BR>
 * @see         Compte#Compte(String, String)
 * @see         Compte#Compte(String, String, double, double)
 */
    public Compte()
    {
        this("Pas de numéro", "Pas de propriétaire", 0, 0);
    }


/**
 * Constructeur paramétré.<BR>
 * <BR>
 * Permet de créer un Compte en donnant son numéro et son propriétaire.<BR>
 * Les crédits et débits sont initialisés à 0.<BR>
 * <BR>
 * @param		pNumCompte		Le numéro du Compte.
 * @param		pNomProp		Le nom du propriétaire.
 * @see         Compte#Compte(String, String, double, double)
 */
    public Compte(String pNumCompte, String pNomProp)
    {
        this(pNumCompte, pNomProp, 0, 0);
    }

/**
 * Constructeur paramétré.<BR>
 * <BR>
 * Permet de créer un Compte en donnant son numéro, son propriétaire et des montants 
 * initiaux de débits et crédits.<BR>
 * Le solde est initialisé en conséquence (crédits - débits).<BR>
 * <BR>
 * @param		pNumCompte		Le numéro du Compte.
 * @param		pNomProp		Le nom du propriétaire.
 * @param		pDebit			Montant initial des débits.
 * @param		pCredit			Montant initial des crédits.
 * @see         Compte#Compte(String, String)
 */
    public Compte(String pNumCompte, String pNomProp, double pDebit, double pCredit)
    {
		this.numCompte = pNumCompte;
		this.proprietaire = pNomProp;
        this.debit = pDebit;
        this.credit = pCredit;
    }

    // Methodes de consultation

/**
 * Permet d'obtenir le solde d'un Compte.<BR>
 * <BR>
 * @return		Le solde du Compte.
 */
    public double soldeCompte ()
    {
        return this.credit - this.debit;
    }

/**
 * Permet d'obtenir le propriétaire d'un Compte.<BR>
 * <BR>
 * @see         Compte#setProprietaire(String) 
 * @return		Le propriétaire du Compte.
 */    public String getProprietaire ()
    {
        return this.proprietaire;
    }

/**
 * Permet d'obtenir le numéro d'un Compte.<BR>
 * <BR>
 * @return		Le numéro du Compte.
 */    public String getNumCompte ()
    {
        return this.numCompte;
    }


/**
 * Permet d'afficher un Compte - <B>ATTENTION : Méthode spéciale pour les TPs.</B><BR>
 * <BR>
 * Affiche le numéro, le propriétaire, le total des débits, le total des crédits.<BR>
 * Message affiché :<BR>
 * "  Num. : aaa  - Prop. : bbb - Debit xxx E / Credit yyy E""<BR>
 * <BR>
 * <B>ATTENTION : Méthode spéciale pour les TP.</B><BR>
 * <BR>
 */
    public void afficher ()
    {
		System.out.print ("  Num. : " + this.numCompte+" - Prop. : " + this.proprietaire);
        System.out.println(" - Debit " + this.debit + " E / Credit " + this.credit + " E");
    }


    // Methodes de mise a jour

/**
 * Permet d'effectuer un retrait sur un Compte.<BR>
 * <BR>
 * Effectue un retrait (débit) de pSomme Euros sur le Compte.<BR> 
 * Spécial TP : tout retrait est accepté, même si le solde est négatif !<BR>
 * <BR>
 * @param		pSomme			Le montant retiré sur le Compte.
 * @see         Compte#deposer(double)
 */
    public void retirer (double pSomme)
    {
        this.debit = this.debit + pSomme;
    }

/**
 * Permet d'effectuer un dépot sur un Compte.<BR>
 * <BR>
 * Effectue un dépot (crédit) de pSomme Euros sur le Compte.<BR> 
 * <BR>
 * @param		pSomme			Le montant déposé sur le Compte.
 * @see         Compte#retirer(double)
 */
    public void deposer (double pSomme)
    {
         this.credit = this.credit + pSomme;
    }

/**
 * Permet de modifier le propriétaire d'un Compte.<BR>
 * <BR>
 * @param		pNomProp		Le nom du propriétaire.
 * @see         Compte#getProprietaire() 
 */
    public void setProprietaire (String pNomProp)
    {
		this.proprietaire = pNomProp;
    }

}
